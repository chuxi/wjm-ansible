<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<!-- Put site-specific property overrides in this file. -->

<configuration>

<property>
  <name>dfs.namenode.name.dir</name>
  <value>file://{{ data_dir }}/hadoop/name</value>
  <description>Determines where on the local filesystem the DFS name node should store the name table.If this is a comma-delimited list of directories,then name table is replicated in all of the directories,for redundancy.</description>
  <final>true</final>
</property>

<property>
   <name>dfs.datanode.data.dir</name>
   <value>{{ hadoop_dfs_datanode_data_dir | join(',') }}</value>
   <description>Determines where on the local filesystem an DFS data node should store its blocks.If this is a comma-delimited list of directories,then data will be stored in all named directories,typically on different devices.Directories that do not exist are ignored.
   </description>
</property>

<property>
      <name>dfs.permission</name>
      <value>false</value>
</property>
<property>
      <name>dfs.replication</name>
      <value>{{ hadoop_dfs_replication }}</value>
</property>
<property>
    <name>dfs.datanode.max.xcievers</name>
    <value>8192</value>
</property>
<property>
    <name>dfs.datanode.max.transfer.threads</name>
    <value>4096</value>
    <description>
          Specifies the maximum number of threads to use for transferring data
          in and out of the DN.
    </description>
</property>
<property>
   <name>dfs.blocksize</name>
   <value>{{ hadoop_dfs_blocksize }}</value>
   <description>
       The default block size for new files, in bytes.
       You can use the following suffix (case insensitive):
       k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the
       size (such as 128k, 512m, 1g, etc.),
       Or provide complete size in bytes (such as 134217728 for 128 MB).
   </description>
</property>
<property>
    <name>dfs.namenode.handler.count</name>
    <value>100</value>
    <description>The number of server threads for the namenode.</description>
</property>
<property>
        <name>dfs.datanode.du.reserved</name>
        <value>26843545600</value>
        <description>reserved disk 25G.</description>
</property>

{% if hadoop_mode == 'ha' %}

<property>
  <name>dfs.nameservices</name>
  <value>windjammerFS</value>
  <description>
    Comma-separated list of nameservices.
  </description>
</property>
 
<property>
  <name>dfs.ha.namenodes.windjammerFS</name>
  <value>nn1,nn2</value>
  <description>The prefix for a given nameservice, contains a comma-separated list of namenodes for a given nameservice (eg EXAMPLENAMESERVICE).</description>
</property>
 
<property>
  <name>dfs.namenode.rpc-address.windjammerFS.nn1</name>
  <value>{{ groups['hadoop-master'][0] }}:8020</value>
  <description>Rpc address of namenode nn1</description>
</property>
 
<property>
  <name>dfs.namenode.http-address.windjammerFS.nn1</name>
  <value>{{ groups['hadoop-master'][0] }}:50070</value>
  <description>Http address of namenode nn1</description>
</property>
 
<property>
  <name>dfs.namenode.rpc-address.windjammerFS.nn2</name>
  <value>{{ groups['hadoop-master'][1] }}:8020</value>
  <description>Rpc address of namenode nn2</description>
</property>
 
<property>
  <name>dfs.namenode.http-address.windjammerFS.nn2</name>
  <value>{{ groups['hadoop-master'][1] }}:50070</value>
  <description>Http address of namenode nn2</description>
</property>
 
<property>
  <name>dfs.namenode.shared.edits.dir</name>
  <value>qjournal://{% for item in groups['hadoop-journal'] %}{{ item }}:8485{% if not loop.last %};{% endif %}{% endfor %}/windjammerFS</value>
  <description>3 journalnodes to store edits</description>
</property>

<property>
  <name>ha.zookeeper.quorum</name>
  <value>{% for item in groups['zookeeper'] %}{{ item }}:2181{% if not loop.last %},{% endif %}{% endfor %}</value>
  <description>A list of ZooKeeper server addresses, separated by commas, that
  are to be used by the ZKFailoverController in automatic failover.
  </description>
</property>

<property>
  <name>dfs.journalnode.edits.dir</name>
  <value>{{ data_dir }}/hadoop/jn</value>
  <description>journaldata storage dir</description>
</property>

<property>
  <name>dfs.ha.automatic-failover.enabled</name>
  <value>true</value>
  <description>
    Whether automatic failover is enabled. See the HDFS High
    Availability documentation for details on automatic HA
    configuration.
  </description>
</property>

<property>
    <name>dfs.ha.fencing.methods</name>
    <value>shell(/bin/true)</value>
</property>
<property>
    <name>dfs.ha.fencing.ssh.connect-timeout</name>
    <value>10000</value>
</property>
<property>
    <name>dfs.ha.automatic-failover.enabled</name>
    <value>true</value>
    <description>
      Whether automatic failover is enabled. See the HDFS High
      Availability documentation for details on automatic HA
      configuration.
    </description>
</property>
<property>
    <name>dfs.client.failover.proxy.provider.windjammerFS</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>

{% endif %}

{% if hadoop_drop_cache == True %}
<property>
    <name>dfs.datanode.drop.cache.behind.reads</name>
    <value>true</value>
</property>
<property>
    <name>dfs.datanode.drop.cache.behind.writes</name>
    <value>true</value>
</property>
<property>
    <name>dfs.client.cache.drop.behind.reads</name>
    <value>true</value>
</property>
<property>
    <name>dfs.client.cache.drop.behind.reads</name>
    <value>true</value>
</property>

{% endif %}

</configuration>
